---
# Check if KUBECONFIG or ~/.kube/config exists
- name: "Check if KUBECONFIG or ~/.kube/config exists"
  block:

    # Search of ~/.kube/config file and store results
    - name: "Check for ~/.kube/config file"
      ansible.builtin.stat:
        path: "~/.kube/config"
      register: kubeconfig_file

    # Discover if the KUBECONFIG environment variable is set
    - name: Discover KUBECONFIG environment variable is set
      ansible.builtin.set_fact:
        kubeconfig: "{{ lookup('ansible.builtin.env', 'KUBECONFIG', default='~/.kube/config') }}"

    # Validate and proceed if either the KUBECONFIG environment variable is defined or if the 
    # ~/.kube/config file exists. There are no checks to validate if this is the correct cluster.
    - name: "Assert KUBECONFIG or or ~/.kube/config exists"
      ansible.builtin.assert:
        that: >
          (kubeconfig is defined and kubeconfig | length) > 0 or
          (kubeconfig_file['stat']['exists'] != false)
        fail_msg: 
          - "~/.kube/config is missing or KUBECONFIG environment variable is undefined."
          - "Log into correct Red Hat OpenShift Cluster, generate login token, and execute oc login."
          - "Re-run playbook after valid ~/.kube/config is generated."

    # - name: "[INCLUDE VARS] - Red Hat OpenShift Cluster Login Information"
    #   ansible.builtin.include_vars:
    #     file: vars/redhat-openshift-cluster-login-information.yml
      
    # - name: "[INCLUDE ROLE] - Red Hat OpenShift Cluster Login"
    #   ansible.builtin.include_role:
    #     name: redhat-openshift-cluster-login
    #   when: >
    #     (kubeconfig is defined and kubeconfig | length) > 0 or
    #     (kubeconfig_file['stat']['exists'] != false)